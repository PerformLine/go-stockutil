{
    "Name": "fileutil",
    "CanonicalImportPath": "github.com/ghetzel/go-stockutil/fileutil",
    "ImportPath": "fileutil",
    "ParentPackage": "stockutil",
    "URL": "https://github.com/ghetzel/go-stockutil",
    "Synopsis": "Helpers for working with files and filesystems\n",
    "MainFunction": false,
    "CommentWordCount": 995,
    "LineCount": 2297,
    "SourceLineCount": 1881,
    "FunctionCount": 67,
    "TypeCount": 13,
    "ConstantCount": 3,
    "VariableCount": 24,
    "Statistics": {
        "Mean": 0.3464,
        "StdDev": 0.4595,
        "GeometricMean": 1,
        "HarmonicMean": 0,
        "Median": 0,
        "Minimum": 0,
        "Maximum": 1
    },
    "Files": [
        {
            "Name": "closer.go",
            "Imports": [
                {
                    "PackageName": "io",
                    "Alias": "io"
                }
            ],
            "Size": 645,
            "LineCount": 30,
            "SourceLineCount": 22,
            "FunctionCount": 3,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "directory.go",
            "Imports": [
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "path/filepath",
                    "Alias": "filepath"
                },
                {
                    "PackageName": "sort",
                    "Alias": "sort"
                }
            ],
            "Size": 4937,
            "LineCount": 199,
            "SourceLineCount": 152,
            "FunctionCount": 6,
            "TypeCount": 5,
            "ConstantCount": 2,
            "VariableCount": 0
        },
        {
            "Name": "directory_test.go",
            "Imports": [
                {
                    "PackageName": "bytes",
                    "Alias": "bytes"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "path/filepath",
                    "Alias": "filepath"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 1815,
            "LineCount": 85,
            "SourceLineCount": 65,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "file.go",
            "Imports": [
                {
                    "PackageName": "bytes",
                    "Alias": "bytes"
                },
                {
                    "PackageName": "crypto",
                    "Alias": "crypto"
                },
                {
                    "PackageName": "crypto/sha256",
                    "Alias": "sha256"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "hash",
                    "Alias": "hash"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "path/filepath",
                    "Alias": "filepath"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/convutil",
                    "Alias": "convutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/pathutil",
                    "Alias": "pathutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/mattn/go-isatty",
                    "Alias": "isatty"
                }
            ],
            "Size": 13258,
            "LineCount": 518,
            "SourceLineCount": 401,
            "FunctionCount": 24,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 23
        },
        {
            "Name": "file_handlers.go",
            "Imports": [
                {
                    "PackageName": "crypto/tls",
                    "Alias": "tls"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "net",
                    "Alias": "net"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/pathutil",
                    "Alias": "pathutil"
                },
                {
                    "PackageName": "github.com/jlaffaye/ftp",
                    "Alias": "ftp"
                },
                {
                    "PackageName": "github.com/pkg/sftp",
                    "Alias": "sftp"
                },
                {
                    "PackageName": "golang.org/x/crypto/ssh",
                    "Alias": "ssh"
                }
            ],
            "Size": 5512,
            "LineCount": 215,
            "SourceLineCount": 178,
            "FunctionCount": 5,
            "TypeCount": 2,
            "ConstantCount": 1,
            "VariableCount": 0
        },
        {
            "Name": "file_test.go",
            "Imports": [
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 2637,
            "LineCount": 86,
            "SourceLineCount": 67,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "fileinfo.go",
            "Imports": [
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                }
            ],
            "Size": 1911,
            "LineCount": 112,
            "SourceLineCount": 95,
            "FunctionCount": 13,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "fs.go",
            "Imports": [
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "regexp",
                    "Alias": "regexp"
                }
            ],
            "Size": 522,
            "LineCount": 28,
            "SourceLineCount": 22,
            "FunctionCount": 1,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "fs_test.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "regexp",
                    "Alias": "regexp"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 2057,
            "LineCount": 98,
            "SourceLineCount": 71,
            "FunctionCount": 1,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "manipulator.go",
            "Imports": [
                {
                    "PackageName": "bufio",
                    "Alias": "bufio"
                },
                {
                    "PackageName": "bytes",
                    "Alias": "bytes"
                },
                {
                    "PackageName": "errors",
                    "Alias": "errors"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                }
            ],
            "Size": 2852,
            "LineCount": 119,
            "SourceLineCount": 81,
            "FunctionCount": 4,
            "TypeCount": 2,
            "ConstantCount": 0,
            "VariableCount": 1
        },
        {
            "Name": "manipulator_funcs.go",
            "Imports": [
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                }
            ],
            "Size": 2449,
            "LineCount": 104,
            "SourceLineCount": 78,
            "FunctionCount": 7,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "manipulator_test.go",
            "Imports": [
                {
                    "PackageName": "bytes",
                    "Alias": "bytes"
                },
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 3260,
            "LineCount": 111,
            "SourceLineCount": 86,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "mime.go",
            "Imports": [
                {
                    "PackageName": "io",
                    "Alias": "io"
                },
                {
                    "PackageName": "mime",
                    "Alias": "mime"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "path/filepath",
                    "Alias": "filepath"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "sync",
                    "Alias": "sync"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/h2non/filetype",
                    "Alias": "filetype"
                }
            ],
            "Size": 27765,
            "LineCount": 571,
            "SourceLineCount": 547,
            "FunctionCount": 3,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "mime_test.go",
            "Imports": [
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 622,
            "LineCount": 21,
            "SourceLineCount": 16,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        }
    ],
    "Constants": [
        {
            "Name": "DefaultOpenTimeout",
            "Immutable": true,
            "Expression": "time.Duration(10 * time.Second)"
        },
        {
            "Name": "FailOnError",
            "Immutable": true
        },
        {
            "Name": "NoRecursive",
            "Type": "DirReaderOption",
            "Immutable": true,
            "Expression": "iota"
        }
    ],
    "Variables": [
        {
            "Name": "CompareHasher",
            "Type": "hash.Hash",
            "Expression": "sha256.New()"
        },
        {
            "Name": "DirExists",
            "Expression": "pathutil.DirExists",
            "Comment": "Alias functions from pathutil as a convenience"
        },
        {
            "Name": "Exists",
            "Expression": "pathutil.Exists"
        },
        {
            "Name": "ExpandUser",
            "Expression": "pathutil.ExpandUser"
        },
        {
            "Name": "FileExists",
            "Expression": "pathutil.FileExists"
        },
        {
            "Name": "IsAppend",
            "Expression": "pathutil.IsAppend"
        },
        {
            "Name": "IsAppendable",
            "Expression": "pathutil.IsAppendable"
        },
        {
            "Name": "IsCharDevice",
            "Expression": "pathutil.IsCharDevice"
        },
        {
            "Name": "IsDevice",
            "Expression": "pathutil.IsDevice"
        },
        {
            "Name": "IsExclusive",
            "Expression": "pathutil.IsExclusive"
        },
        {
            "Name": "IsNamedPipe",
            "Expression": "pathutil.IsNamedPipe"
        },
        {
            "Name": "IsNonemptyDir",
            "Expression": "pathutil.IsNonemptyDir"
        },
        {
            "Name": "IsNonemptyExecutableFile",
            "Expression": "pathutil.IsNonemptyExecutableFile"
        },
        {
            "Name": "IsNonemptyFile",
            "Expression": "pathutil.IsNonemptyFile"
        },
        {
            "Name": "IsReadable",
            "Expression": "pathutil.IsReadable"
        },
        {
            "Name": "IsSetgid",
            "Expression": "pathutil.IsSetgid"
        },
        {
            "Name": "IsSetuid",
            "Expression": "pathutil.IsSetuid"
        },
        {
            "Name": "IsSocket",
            "Expression": "pathutil.IsSocket"
        },
        {
            "Name": "IsSticky",
            "Expression": "pathutil.IsSticky"
        },
        {
            "Name": "IsSymlink",
            "Expression": "pathutil.IsSymlink"
        },
        {
            "Name": "IsTemporary",
            "Expression": "pathutil.IsTemporary"
        },
        {
            "Name": "IsWritable",
            "Expression": "pathutil.IsWritable"
        },
        {
            "Name": "LinkExists",
            "Expression": "pathutil.LinkExists"
        },
        {
            "Name": "SkipToken",
            "Expression": "errors.New(`skip token`)",
            "Comment": "By default, the underlying bufio.Scanner that tokenizes the input data\nwill discard the tokens that it's splitting on.  however, in most cases, we\ndon't actually want this.  however, if the thing we're removing IS this token,\nthen we will have removed the token, then immediately put it back in the stream.\n\nReturning the SkipToken error will tell the ReadManipulator to not put this token\nback into the stream, but otherwise not produce an actual error during read."
        }
    ],
    "Functions": [
        {
            "Name": "AddMimeTypeFile",
            "Arguments": [
                {
                    "Name": "filename",
                    "Type": "string"
                }
            ],
            "Signature": "AddMimeTypeFile(filename string)",
            "Source": "ewoJaWYgSXNOb25lbXB0eUZpbGUoZmlsZW5hbWUpIHsKCQltaW1lRmlsZXMgPSBhcHBlbmQobWltZUZpbGVzLCBmaWxlbmFtZSkKCQlJbml0TWltZSgpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ChecksumFile",
            "Arguments": [
                {
                    "Name": "filename",
                    "Type": "string"
                },
                {
                    "Name": "fn",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]byte"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "ChecksumFile(filename string, fn interface{}) ([]byte, error)",
            "Source": "ewoJdmFyIGhhc2ggY3J5cHRvLkhhc2gKCWlmIGgsIG9rIDo9IGZuLihjcnlwdG8uSGFzaCk7IG9rIHsKCQloYXNoID0gaAoJfSBlbHNlIHsKCQlzd2l0Y2ggc3RyaW5ncy5Ub0xvd2VyKHR5cGV1dGlsLlN0cmluZyhmbikpIHsKCQljYXNlIGBtZDRgOgoJCQloYXNoID0gY3J5cHRvLk1ENAoJCWNhc2UgYG1kNWA6CgkJCWhhc2ggPSBjcnlwdG8uTUQ1CgkJY2FzZSBgc2hhMWA6CgkJCWhhc2ggPSBjcnlwdG8uU0hBMQoJCWNhc2UgYHNoYTIyNGA6CgkJCWhhc2ggPSBjcnlwdG8uU0hBMjI0CgkJY2FzZSBgc2hhMjU2YDoKCQkJaGFzaCA9IGNyeXB0by5TSEEyNTYKCQljYXNlIGBzaGEzODRgOgoJCQloYXNoID0gY3J5cHRvLlNIQTM4NAoJCWNhc2UgYHNoYTUxMmA6CgkJCWhhc2ggPSBjcnlwdG8uU0hBNTEyCgkJY2FzZSBgbWQ1c2hhMWA6CgkJCWhhc2ggPSBjcnlwdG8uTUQ1U0hBMQoJCWNhc2UgYHJpcGVtZDE2MGA6CgkJCWhhc2ggPSBjcnlwdG8uUklQRU1EMTYwCgkJY2FzZSBgc2hhM18yMjRgOgoJCQloYXNoID0gY3J5cHRvLlNIQTNfMjI0CgkJY2FzZSBgc2hhM18yNTZgOgoJCQloYXNoID0gY3J5cHRvLlNIQTNfMjU2CgkJY2FzZSBgc2hhM18zODRgOgoJCQloYXNoID0gY3J5cHRvLlNIQTNfMzg0CgkJY2FzZSBgc2hhM181MTJgOgoJCQloYXNoID0gY3J5cHRvLlNIQTNfNTEyCgkJY2FzZSBgc2hhNTEyXzIyNGA6CgkJCWhhc2ggPSBjcnlwdG8uU0hBNTEyXzIyNAoJCWNhc2UgYHNoYTUxMl8yNTZgOgoJCQloYXNoID0gY3J5cHRvLlNIQTUxMl8yNTYKCQljYXNlIGBibGFrZTJzXzI1NmA6CgkJCWhhc2ggPSBjcnlwdG8uQkxBS0Uyc18yNTYKCQljYXNlIGBibGFrZTJiXzI1NmA6CgkJCWhhc2ggPSBjcnlwdG8uQkxBS0UyYl8yNTYKCQljYXNlIGBibGFrZTJiXzM4NGA6CgkJCWhhc2ggPSBjcnlwdG8uQkxBS0UyYl8zODQKCQljYXNlIGBibGFrZTJiXzUxMmA6CgkJCWhhc2ggPSBjcnlwdG8uQkxBS0UyYl81MTIKCQlkZWZhdWx0OgoJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJVbmtub3duIGhhc2ggZnVuY3Rpb24gJXEiLCBmbikKCQl9Cgl9CglpZiBoYXNoLkF2YWlsYWJsZSgpIHsKCQloYXNoZXIgOj0gaGFzaC5OZXcoKQoJCWlmIGZpbGUsIGVyciA6PSBvcy5PcGVuKGZpbGVuYW1lKTsgZXJyID09IG5pbCB7CgkJCWRlZmVyIGZpbGUuQ2xvc2UoKQoJCQlpZiBfLCBlcnIgOj0gaW8uQ29weShoYXNoZXIsIGZpbGUpOyBlcnIgPT0gbmlsIHsKCQkJCXN1bSA6PSBoYXNoZXIuU3VtKG5pbCkKCQkJCXJldHVybiBzdW0sIG5pbAoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCX0KCQl9IGVsc2UgewoJCQlyZXR1cm4gbmlsLCBlcnIKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkhhc2ggZnVuY3Rpb24gJXYgaXMgbm90IGF2YWlsYWJsZSIsIGhhc2gpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "CompareReaders",
            "Comment": "Compare the binary contents of two io.Reader instances.  The result will be 0 if a==b, -1 if a \u003c b, and +1 if a \u003e b.\nAn optional hash.Hash instance may be given, otherwise the default crypto/sha256 will be used.",
            "Arguments": [
                {
                    "Name": "a",
                    "Type": "io.Reader"
                },
                {
                    "Name": "b",
                    "Type": "io.Reader"
                },
                {
                    "Name": "hasher",
                    "Type": "...hash.Hash"
                }
            ],
            "Returns": [
                {
                    "Type": "int"
                }
            ],
            "Signature": "CompareReaders(a io.Reader, b io.Reader, hasher ...hash.Hash) int",
            "Source": "ewoJdmFyIGggaGFzaC5IYXNoCglpZiBsZW4oaGFzaGVyKSA+IDAgJiYgaGFzaGVyWzBdICE9IG5pbCB7CgkJaCA9IGhhc2hlclswXQoJfSBlbHNlIHsKCQloID0gc2hhMjU2Lk5ldygpCgl9CglpZiBfLCBlcnIgOj0gaW8uQ29weShoLCBhKTsgZXJyID09IG5pbCB7CgkJczEgOj0gaC5TdW0obmlsKQoJCWguUmVzZXQoKQoJCWlmIF8sIGVyciA6PSBpby5Db3B5KGgsIGIpOyBlcnIgPT0gbmlsIHsKCQkJczIgOj0gaC5TdW0obmlsKQoJCQlyZXR1cm4gYnl0ZXMuQ29tcGFyZShzMSwgczIpCgkJfQoJfQoJcmV0dXJuIC0xCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "CopyDir",
            "Comment": "Recursively walk the entries of a given directory, calling CopyEntryFunc for each entry.\nThe io.Writer returned from the function will have that file's contents written to it.  If\nthe io.Writer is nil, the file will not be written anywhere but no error will be returned.\nIf CopyEntryFunc returns an error, the behavior will be consistent with filepath.WalkFunc",
            "Arguments": [
                {
                    "Name": "root",
                    "Type": "string"
                },
                {
                    "Name": "fn",
                    "Type": "CopyEntryFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "CopyDir(root string, fn CopyEntryFunc) error",
            "Source": "ewoJaWYgcCwgZXJyIDo9IEV4cGFuZFVzZXIocm9vdCk7IGVyciA9PSBuaWwgewoJCXJvb3QgPSBwCgl9IGVsc2UgewoJCXJldHVybiBlcnIKCX0KCXJldHVybiBmaWxlcGF0aC5XYWxrKHJvb3QsIGZ1bmMocGF0aCBzdHJpbmcsIGluZm8gb3MuRmlsZUluZm8sIGVyciBlcnJvcikgZXJyb3IgewoJCWlmIHcsIGVyciA6PSBmbihwYXRoLCBpbmZvLCBlcnIpOyBlcnIgPT0gbmlsICYmIHcgIT0gbmlsIHsKCQkJaWYgZmlsZSwgZXJyIDo9IG9zLk9wZW4ocGF0aCk7IGVyciA9PSBuaWwgewoJCQkJZGVmZXIgZmlsZS5DbG9zZSgpCgkJCQlfLCBlcnIgOj0gaW8uQ29weSh3LCBmaWxlKQoJCQkJcmV0dXJuIGVycgoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIGVycgoJCQl9CgkJfSBlbHNlIGlmIGVyciAhPSBuaWwgewoJCQlyZXR1cm4gZXJyCgkJfSBlbHNlIHsKCQkJcmV0dXJuIG5pbAoJCX0KCX0pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "CopyFile",
            "Comment": "Copy a file from one place to another.  Source can be an io.Reader or string.  If source is a\nstring, the string will be passed to the Open() function as a URL.  Destination can be an\nio.Writer or string.  If destination is a string, it will be treated as a local filesystem path\nto write the data read from source to.\n\nIf either source or destination implements io.Closer, thee files will be closed before this\nfunction returns.",
            "Arguments": [
                {
                    "Name": "source",
                    "Type": "interface{}"
                },
                {
                    "Name": "destination",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "CopyFile(source interface{}, destination interface{}) error",
            "Source": "ewoJdmFyIHNyZWFkZXIgaW8uUmVhZGVyCgl2YXIgZHdyaXRlciBpby5Xcml0ZXIKCWlmIHNmaWxlbmFtZSwgb2sgOj0gc291cmNlLihzdHJpbmcpOyBvayB7CgkJaWYgc3IsIGVyciA6PSBPcGVuKHNmaWxlbmFtZSk7IGVyciA9PSBuaWwgewoJCQlzcmVhZGVyID0gc3IKCQl9IGVsc2UgewoJCQlyZXR1cm4gZXJyCgkJfQoJfSBlbHNlIGlmIHNyLCBvayA6PSBzb3VyY2UuKGlvLlJlYWRlcik7IG9rIHsKCQlzcmVhZGVyID0gc3IKCX0gZWxzZSB7CgkJcmV0dXJuIGZtdC5FcnJvcmYoIlVuc3VwcG9ydGVkIHNvdXJjZSAlVCIsIHNvdXJjZSkKCX0KCWlmIGRmaWxlbmFtZSwgb2sgOj0gc291cmNlLihzdHJpbmcpOyBvayB7CgkJaWYgZGZpbGUsIGVyciA6PSBvcy5DcmVhdGUoZGZpbGVuYW1lKTsgZXJyID09IG5pbCB7CgkJCWR3cml0ZXIgPSBkZmlsZQoJCX0gZWxzZSB7CgkJCXJldHVybiBlcnIKCQl9Cgl9IGVsc2UgaWYgZHcsIG9rIDo9IGRlc3RpbmF0aW9uLihpby5Xcml0ZXIpOyBvayB7CgkJZHdyaXRlciA9IGR3Cgl9IGVsc2UgewoJCXJldHVybiBmbXQuRXJyb3JmKCJVbnN1cHBvcnRlZCBzb3VyY2UgJVQiLCBzb3VyY2UpCgl9CglkZWZlciBmdW5jKCkgewoJCWlmIHNjLCBvayA6PSBzcmVhZGVyLihpby5DbG9zZXIpOyBvayB7CgkJCXNjLkNsb3NlKCkKCQl9CgkJaWYgZGMsIG9rIDo9IGR3cml0ZXIuKGlvLkNsb3Nlcik7IG9rIHsKCQkJZGMuQ2xvc2UoKQoJCX0KCX0oKQoJXywgZXJyIDo9IGlvLkNvcHkoZHdyaXRlciwgc3JlYWRlcikKCXJldHVybiBlcnIKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "GetMimeType",
            "Comment": "GetMimeType goes out of its way to really, really try to figure out the MIME type of a given\nfilename or io.Reader.  If the first argument satisfies the io.Seeker interface, the seeker\nwill Seek() back to the beginning.  If it satisfies the io.Closer interface, it will be closed.",
            "Arguments": [
                {
                    "Name": "filenameOrReader",
                    "Type": "interface{}"
                },
                {
                    "Name": "fallback",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "GetMimeType(filenameOrReader interface{}, fallback ...string) string",
            "Source": "ewoJb25jZS5EbyhJbml0TWltZSkKCWlmIGZpbGVuYW1lLCBvayA6PSBmaWxlbmFtZU9yUmVhZGVyLihzdHJpbmcpOyBvayB7CgkJaWYgbXQgOj0gbWltZS5UeXBlQnlFeHRlbnNpb24oZmlsZXBhdGguRXh0KGZpbGVuYW1lKSk7IG10ICE9IGBgIHsKCQkJcmV0dXJuIG10CgkJfSBlbHNlIGlmIElzTm9uZW1wdHlGaWxlKGZpbGVuYW1lKSB7CgkJCWlmIGZpbGUsIGVyciA6PSBvcy5PcGVuKGZpbGVuYW1lKTsgZXJyID09IG5pbCB7CgkJCQlkZWZlciBmaWxlLkNsb3NlKCkKCQkJCWZpbGVuYW1lT3JSZWFkZXIgPSBmaWxlCgkJCX0KCQl9Cgl9CglpZiByZWFkZXIsIG9rIDo9IGZpbGVuYW1lT3JSZWFkZXIuKGlvLlJlYWRlcik7IG9rIHsKCQlpZiBkZXRlY3RlZCwgZXJyIDo9IGZpbGV0eXBlLk1hdGNoUmVhZGVyKHJlYWRlcik7IGVyciA9PSBuaWwgJiYgZGV0ZWN0ZWQuTUlNRS5WYWx1ZSAhPSBgYCB7CgkJCXJldHVybiBkZXRlY3RlZC5NSU1FLlZhbHVlCgkJfQoJCWlmIHNlZWtlciwgb2sgOj0gZmlsZW5hbWVPclJlYWRlci4oaW8uU2Vla2VyKTsgb2sgewoJCQlzZWVrZXIuU2VlaygwLCBpby5TZWVrU3RhcnQpCgkJfQoJfQoJaWYgbGVuKGZhbGxiYWNrKSA+IDAgJiYgZmFsbGJhY2tbMF0gIT0gYGAgewoJCXJldHVybiBmYWxsYmFja1swXQoJfSBlbHNlIHsKCQlyZXR1cm4gYGAKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "GetNthLine",
            "Comment": "Attempt to return the nth line (starting from 1) in the given file or reader.",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                },
                {
                    "Name": "number",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "GetNthLine(file interface{}, number int) (string, error)",
            "Source": "ewoJaWYgbGluZXMsIGVyciA6PSBSZWFkQWxsTGluZXMoZmlsZSk7IGVyciA9PSBuaWwgewoJCWlmIG51bWJlciA8IDEgewoJCQlyZXR1cm4gYGAsIGZtdC5FcnJvcmYoImxpbmUgbnVtYmVyIG11c3QgYmUgPj0gMSIpCgkJfQoJCWlmIG51bWJlciA8PSBsZW4obGluZXMpIHsKCQkJcmV0dXJuIGxpbmVzW251bWJlci0xXSwgbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGBgLCBmbXQuRXJyb3JmKCJsaW5lIGV4Y2VlZHMgZmlsZSBsaW5lIGNvdW50IikKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBgYCwgZXJyCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "InitMime",
            "Signature": "InitMime()",
            "Source": "",
            "IsPackageLevel": true
        },
        {
            "Name": "IsModifiedAfter",
            "Comment": "Return true if the given FileInfo sports a ModTime later than the current file.",
            "Arguments": [
                {
                    "Name": "stat",
                    "Type": "os.FileInfo"
                },
                {
                    "Name": "current",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "IsModifiedAfter(stat os.FileInfo, current string) bool",
            "Source": "ewoJaWYgRXhpc3RzKGN1cnJlbnQpIHsKCQljdXJyZW50ID0gTXVzdEV4cGFuZFVzZXIoY3VycmVudCkKCQlpZiBjdXJyZW50U3RhdCwgZXJyIDo9IG9zLlN0YXQoY3VycmVudCk7IGVyciA9PSBuaWwgewoJCQlyZXR1cm4gc3RhdC5Nb2RUaW1lKCkuQWZ0ZXIoY3VycmVudFN0YXQuTW9kVGltZSgpKQoJCX0gZWxzZSB7CgkJCXJldHVybiBmYWxzZQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIHRydWUKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "IsTerminal",
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "IsTerminal() bool",
            "Source": "ewoJcmV0dXJuIGlzYXR0eS5Jc1Rlcm1pbmFsKG9zLlN0ZG91dC5GZCgpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ManipulateAll",
            "Comment": "Performs multiple sequential manipulations on an intercepted line of text from\nan io.Reader as its being read.",
            "Arguments": [
                {
                    "Name": "fns",
                    "Type": "...ReadManipulatorFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "ReadManipulatorFunc"
                }
            ],
            "Signature": "ManipulateAll(fns ...ReadManipulatorFunc) ReadManipulatorFunc",
            "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJdmFyIGVyciBlcnJvcgoJCWZvciBfLCBmbiA6PSByYW5nZSBmbnMgewoJCQlkYXRhLCBlcnIgPSBmbihkYXRhKQoJCQlpZiBlcnIgIT0gbmlsIHsKCQkJCWJyZWFrCgkJCX0KCQl9CgkJcmV0dXJuIGRhdGEsIGVycgoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "MustExpandUser",
            "Arguments": [
                {
                    "Name": "path",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "MustExpandUser(path string) string",
            "Source": "ewoJaWYgZXhwYW5kZWQsIGVyciA6PSBFeHBhbmRVc2VyKHBhdGgpOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gZXhwYW5kZWQKCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "MustGetNthLine",
            "Comment": "A panicky version of GetNthLine.",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                },
                {
                    "Name": "number",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "MustGetNthLine(file interface{}, number int) string",
            "Source": "ewoJaWYgbGluZSwgZXJyIDo9IEdldE50aExpbmUoZmlsZSwgbnVtYmVyKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIGxpbmUKCX0gZWxzZSB7CgkJcGFuaWMoZXJyLkVycm9yKCkpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "MustReadAll",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]byte"
                }
            ],
            "Signature": "MustReadAll(file interface{}) []byte",
            "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IFJlYWRBbGwoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBkYXRhCgl9IGVsc2UgewoJCXBhbmljKGVyci5FcnJvcigpKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "MustReadAllLines",
            "Comment": "A panicky version of ReadAllLines.",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "MustReadAllLines(file interface{}) []string",
            "Source": "ewoJaWYgbGluZXMsIGVyciA6PSBSZWFkQWxsTGluZXMoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBsaW5lcwoJfSBlbHNlIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "MustReadAllString",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "MustReadAllString(file interface{}) string",
            "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IFJlYWRBbGxTdHJpbmcoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBkYXRhCgl9IGVsc2UgewoJCXBhbmljKGVyci5FcnJvcigpKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "MustWriteFile",
            "Comment": "Same as WriteFile, but will panic if the file cannot be written.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "interface{}"
                },
                {
                    "Name": "filename",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "int64"
                }
            ],
            "Signature": "MustWriteFile(input interface{}, filename string) int64",
            "Source": "ewoJaWYgbiwgZXJyIDo9IFdyaXRlRmlsZShpbnB1dCwgZmlsZW5hbWUpOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gbgoJfSBlbHNlIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "MustWriteTempFile",
            "Comment": "Same as MustWriteFile, but writes the given input to a temporary file, returning\nthe filename.  The function will panic if the file cannot be written.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "interface{}"
                },
                {
                    "Name": "prefix",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "MustWriteTempFile(input interface{}, prefix string) string",
            "Source": "ewoJaWYgbiwgZXJyIDo9IFdyaXRlVGVtcEZpbGUoaW5wdXQsIHByZWZpeCk7IGVyciA9PSBuaWwgewoJCXJldHVybiBuCgl9IGVsc2UgewoJCXBhbmljKGVyci5FcnJvcigpKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "Open",
            "Comment": "Calls OpenWithOptions with no options set.",
            "Arguments": [
                {
                    "Name": "uri",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "io.Reader"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "Open(uri string) (io.Reader, error)",
            "Source": "ewoJcmV0dXJuIE9wZW5XaXRoT3B0aW9ucyh1cmksIE9wZW5PcHRpb25ze30pCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "OpenWithOptions",
            "Comment": "A generic URL opener that supports various schemes and returns an io.Reader.\nSupported URL schemes include: file://, http://, https://, ftp://, sftp://. If no scheme is\nprovided, the URL is interpreted as a local filesystem path.",
            "Arguments": [
                {
                    "Name": "uri",
                    "Type": "string"
                },
                {
                    "Name": "options",
                    "Type": "OpenOptions"
                }
            ],
            "Returns": [
                {
                    "Type": "io.Reader"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "OpenWithOptions(uri string, options OpenOptions) (io.Reader, error)",
            "Source": "ewoJaWYgdSwgZXJyIDo9IHVybC5QYXJzZSh1cmkpOyBlcnIgPT0gbmlsIHsKCQlpZiBoYW5kbGVyLCBvayA6PSBvcGVuSGFuZGxlcnNbdS5TY2hlbWVdOyBvayB7CgkJCXJldHVybiBoYW5kbGVyKHUsIG9wdGlvbnMpCgkJfSBlbHNlIHsKCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigidW5zdXBwb3J0ZWQgc2NoZW1lICVzIiwgdS5TY2hlbWUpCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJpbnZhbGlkIHNvdXJjZSBVUkwgb3IgZmlsZW5hbWUiKQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ReadAll",
            "Comment": "Takes the given string filename, []byte, io.Reader, or io.ReadCloser and returns\nthe bytes therein.",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]byte"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "ReadAll(file interface{}) ([]byte, error)",
            "Source": "ewoJdmFyIHJjIGlvLlJlYWRDbG9zZXIKCWlmIGIsIG9rIDo9IGZpbGUuKFtdYnl0ZSk7IG9rIHsKCQlyZXR1cm4gYiwgbmlsCgl9IGVsc2UgaWYgciwgb2sgOj0gZmlsZS4oaW8uUmVhZENsb3Nlcik7IG9rIHsKCQlyYyA9IHIKCX0gZWxzZSBpZiByLCBvayA6PSBmaWxlLihpby5SZWFkZXIpOyBvayB7CgkJcmMgPSBpb3V0aWwuTm9wQ2xvc2VyKHIpCgl9IGVsc2UgaWYgZmlsZW5hbWUsIG9rIDo9IGZpbGUuKHN0cmluZyk7IG9rIHsKCQlpZiBmLCBlcnIgOj0gb3MuT3BlbihmaWxlbmFtZSk7IGVyciA9PSBuaWwgewoJCQlyYyA9IGYKCQl9IGVsc2UgewoJCQlyZXR1cm4gbmlsLCBlcnIKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIm11c3QgcHJvdmlkZSBvbmUgb2Y6IHN0cmluZywgW11ieXRlLCBpby5SZWFkZXIsIG9yIGlvLlJlYWRDbG9zZXIiKQoJfQoJZGVmZXIgcmMuQ2xvc2UoKQoJcmV0dXJuIGlvdXRpbC5SZWFkQWxsKHJjKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ReadAllLines",
            "Comment": "Read all lines of text from the given file and return them as a slice.",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "ReadAllLines(file interface{}) ([]string, error)",
            "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IFJlYWRBbGxTdHJpbmcoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBzdHJpbmdzLlNwbGl0KGRhdGEsICJcbiIpLCBuaWwKCX0gZWxzZSB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ReadAllString",
            "Comment": "A string version of ReadAll.",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "ReadAllString(file interface{}) (string, error)",
            "Source": "ewoJaWYgZGF0YSwgZXJyIDo9IFJlYWRBbGwoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBzdHJpbmcoZGF0YSksIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gYGAsIGVycgoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ReadFirstLine",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "ReadFirstLine(file interface{}) (string, error)",
            "Source": "ewoJaWYgbGluZXMsIGVyciA6PSBSZWFkQWxsTGluZXMoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBsaW5lc1swXSwgbmlsCgl9IGVsc2UgewoJCXJldHVybiBgYCwgZXJyCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "RegisterOpenHandler",
            "Comment": "Register a handler for a new or existing URL scheme, for use with Open() and OpenWithOptions()",
            "Arguments": [
                {
                    "Name": "scheme",
                    "Type": "string"
                },
                {
                    "Name": "handler",
                    "Type": "OpenHandler"
                }
            ],
            "Signature": "RegisterOpenHandler(scheme string, handler OpenHandler)",
            "Source": "ewoJb3BlbkhhbmRsZXJzW3NjaGVtZV0gPSBoYW5kbGVyCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "RemoveBlankLines",
            "Comment": "A ReadManipulatorFunc for removing lines that only contain whitespace.",
            "Arguments": [
                {
                    "Name": "data",
                    "Type": "[]byte"
                }
            ],
            "Returns": [
                {
                    "Type": "[]byte"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "RemoveBlankLines(data []byte) ([]byte, error)",
            "Source": "ewoJaWYgbGluZSA6PSBzdHJpbmdzLlRyaW1TcGFjZShzdHJpbmcoZGF0YSkpOyBsZW4obGluZSkgPT0gMCB7CgkJcmV0dXJuIG5pbCwgU2tpcFRva2VuCgl9IGVsc2UgewoJCXJldHVybiBkYXRhLCBuaWwKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "RemoveLinesContaining",
            "Comment": "A ReadManipulatorFunc for removing lines that contain the given string.",
            "Arguments": [
                {
                    "Name": "needle",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "ReadManipulatorFunc"
                }
            ],
            "Signature": "RemoveLinesContaining(needle string) ReadManipulatorFunc",
            "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJaWYgc3RyaW5ncy5Db250YWlucyhzdHJpbmcoZGF0YSksIG5lZWRsZSkgewoJCQlyZXR1cm4gbmlsLCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gZGF0YSwgbmlsCgkJfQoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "RemoveLinesSurroundedBy",
            "Comment": "A ReadManipulatorFunc for removing lines surrounded by a given prefix and suffix.",
            "Arguments": [
                {
                    "Name": "prefix",
                    "Type": "string"
                },
                {
                    "Name": "suffix",
                    "Type": "string"
                },
                {
                    "Name": "trimSpace",
                    "Type": "bool"
                }
            ],
            "Returns": [
                {
                    "Type": "ReadManipulatorFunc"
                }
            ],
            "Signature": "RemoveLinesSurroundedBy(prefix string, suffix string, trimSpace bool) ReadManipulatorFunc",
            "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJbGluZSA6PSBzdHJpbmcoZGF0YSkKCQlpZiB0cmltU3BhY2UgewoJCQlsaW5lID0gc3RyaW5ncy5UcmltU3BhY2UobGluZSkKCQl9CgkJaWYgc3RyaW5ncy5IYXNQcmVmaXgobGluZSwgcHJlZml4KSAmJiBzdHJpbmdzLkhhc1N1ZmZpeChsaW5lLCBzdWZmaXgpIHsKCQkJcmV0dXJuIG5pbCwgbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGRhdGEsIG5pbAoJCX0KCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "RemoveLinesWithPrefix",
            "Comment": "A ReadManipulatorFunc for removing lines that have a given prefix.",
            "Arguments": [
                {
                    "Name": "prefix",
                    "Type": "string"
                },
                {
                    "Name": "trimSpace",
                    "Type": "bool"
                }
            ],
            "Returns": [
                {
                    "Type": "ReadManipulatorFunc"
                }
            ],
            "Signature": "RemoveLinesWithPrefix(prefix string, trimSpace bool) ReadManipulatorFunc",
            "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJbGluZSA6PSBzdHJpbmcoZGF0YSkKCQlpZiB0cmltU3BhY2UgewoJCQlsaW5lID0gc3RyaW5ncy5UcmltU3BhY2UobGluZSkKCQl9CgkJaWYgc3RyaW5ncy5IYXNQcmVmaXgobGluZSwgcHJlZml4KSB7CgkJCXJldHVybiBuaWwsIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBkYXRhLCBuaWwKCQl9Cgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "RemoveLinesWithSuffix",
            "Comment": "A ReadManipulatorFunc for removing lines that have a given suffix.",
            "Arguments": [
                {
                    "Name": "suffix",
                    "Type": "string"
                },
                {
                    "Name": "trimSpace",
                    "Type": "bool"
                }
            ],
            "Returns": [
                {
                    "Type": "ReadManipulatorFunc"
                }
            ],
            "Signature": "RemoveLinesWithSuffix(suffix string, trimSpace bool) ReadManipulatorFunc",
            "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJbGluZSA6PSBzdHJpbmcoZGF0YSkKCQlpZiB0cmltU3BhY2UgewoJCQlsaW5lID0gc3RyaW5ncy5UcmltU3BhY2UobGluZSkKCQl9CgkJaWYgc3RyaW5ncy5IYXNTdWZmaXgobGluZSwgc3VmZml4KSB7CgkJCXJldHVybiBuaWwsIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBkYXRhLCBuaWwKCQl9Cgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "RemoveOpenHandler",
            "Comment": "Removes a registered URL scheme handler.",
            "Arguments": [
                {
                    "Name": "scheme",
                    "Type": "string"
                }
            ],
            "Signature": "RemoveOpenHandler(scheme string)",
            "Source": "ewoJZGVsZXRlKG9wZW5IYW5kbGVycywgc2NoZW1lKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ReplaceWith",
            "Comment": "A ReadManipulatorFunc for replacing text in an io.Reader as its being read.",
            "Arguments": [
                {
                    "Name": "find",
                    "Type": "string"
                },
                {
                    "Name": "replace",
                    "Type": "string"
                },
                {
                    "Name": "occurrences",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "ReadManipulatorFunc"
                }
            ],
            "Signature": "ReplaceWith(find string, replace string, occurrences int) ReadManipulatorFunc",
            "Source": "ewoJcmV0dXJuIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJbGluZSA6PSBzdHJpbmcoZGF0YSkKCQlsaW5lID0gc3RyaW5ncy5SZXBsYWNlKGxpbmUsIGZpbmQsIHJlcGxhY2UsIG9jY3VycmVuY2VzKQoJCXJldHVybiBbXWJ5dGUobGluZSksIG5pbAoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "SameFile",
            "Comment": "Returns whether two files represent the same file.  If a string is given for either file, os.Stat will be run on that\npath.  If os.FileInfo is given for either file, it will be passed to os.SameFile directly.  If either file is an\nio.Reader, the contents of both files will be read and hashed using CompareHasher.  If the hashes are identical, the\nfiles are considered the same.  Any error encountered and this function will return false.",
            "Arguments": [
                {
                    "Name": "first",
                    "Type": "interface{}"
                },
                {
                    "Name": "second",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "SameFile(first interface{}, second interface{}) bool",
            "Source": "ewoJaWYgZmlyc3QgPT0gc2Vjb25kIHsKCQlyZXR1cm4gdHJ1ZQoJfQoJdmFyIGkxLCBpMiBvcy5GaWxlSW5mbwoJdmFyIHIxLCByMiBpby5SZWFkZXIKCWlmIHIsIG9rIDo9IGZpcnN0Lihpby5SZWFkZXIpOyBvayB7CgkJcjEgPSByCgl9IGVsc2UgaWYgaSwgb2sgOj0gZmlyc3QuKG9zLkZpbGVJbmZvKTsgb2sgewoJCWkxID0gaQoJfSBlbHNlIGlmIHN0YXQsIGVyciA6PSBvcy5TdGF0KE11c3RFeHBhbmRVc2VyKHR5cGV1dGlsLlN0cmluZyhmaXJzdCkpKTsgZXJyID09IG5pbCB7CgkJaTEgPSBzdGF0Cgl9IGVsc2UgewoJCXJldHVybiBmYWxzZQoJfQoJaWYgciwgb2sgOj0gc2Vjb25kLihpby5SZWFkZXIpOyBvayB7CgkJcjIgPSByCgl9IGVsc2UgaWYgaSwgb2sgOj0gc2Vjb25kLihvcy5GaWxlSW5mbyk7IG9rIHsKCQlpMiA9IGkKCX0gZWxzZSBpZiBzdGF0LCBlcnIgOj0gb3MuU3RhdChNdXN0RXhwYW5kVXNlcih0eXBldXRpbC5TdHJpbmcoc2Vjb25kKSkpOyBlcnIgPT0gbmlsIHsKCQlpMiA9IHN0YXQKCX0gZWxzZSB7CgkJcmV0dXJuIGZhbHNlCgl9CglpZiByMSA9PSBuaWwgJiYgcjIgPT0gbmlsIHsKCQlyZXR1cm4gb3MuU2FtZUZpbGUoaTEsIGkyKQoJfQoJaWYgcjEgPT0gbmlsIHsKCQlpZiBmLCBlcnIgOj0gb3MuT3BlbihpMS5OYW1lKCkpOyBlcnIgPT0gbmlsIHsKCQkJZGVmZXIgZi5DbG9zZSgpCgkJCXIxID0gZgoJCX0gZWxzZSB7CgkJCXJldHVybiBmYWxzZQoJCX0KCX0KCWlmIHIyID09IG5pbCB7CgkJaWYgZiwgZXJyIDo9IG9zLk9wZW4oaTIuTmFtZSgpKTsgZXJyID09IG5pbCB7CgkJCWRlZmVyIGYuQ2xvc2UoKQoJCQlyMiA9IGYKCQl9IGVsc2UgewoJCQlyZXR1cm4gZmFsc2UKCQl9Cgl9CglyZXR1cm4gKENvbXBhcmVSZWFkZXJzKHIxLCByMiwgQ29tcGFyZUhhc2hlcikgPT0gMCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "SetExt",
            "Comment": "Detects the file extension of the given path and replaces it with the given extension.  The optional\nsecond argument allows you to explictly specify the extension (if known).",
            "Arguments": [
                {
                    "Name": "path",
                    "Type": "string"
                },
                {
                    "Name": "ext",
                    "Type": "string"
                },
                {
                    "Name": "oldexts",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "SetExt(path string, ext string, oldexts ...string) string",
            "Source": "ewoJaWYgZXh0ID09IGBgIHsKCQlyZXR1cm4gcGF0aAoJfQoJdmFyIG9sZGV4dCBzdHJpbmcKCWlmIGxlbihvbGRleHRzKSA+IDAgJiYgb2xkZXh0c1swXSAhPSBgYCB7CgkJb2xkZXh0ID0gb2xkZXh0c1swXQoJfSBlbHNlIHsKCQlvbGRleHQgPSBmaWxlcGF0aC5FeHQocGF0aCkKCX0KCW9sZGV4dCA9IHN0cmluZ3MuVHJpbVByZWZpeChvbGRleHQsIGAuYCkKCWV4dCA9IHN0cmluZ3MuVHJpbVByZWZpeChleHQsIGAuYCkKCWlmIHN0cmluZ3MuSGFzU3VmZml4KHBhdGgsIGAuYCtvbGRleHQpIHsKCQlwYXRoID0gc3RyaW5ncy5UcmltU3VmZml4KHBhdGgsIGAuYCtvbGRleHQpICsgYC5gICsgZXh0Cgl9CglyZXR1cm4gcGF0aAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ShouldGetNthLine",
            "Comment": "Attempts to call GetNthLine, but will return an empty string if there is an error.  Does not panic.",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                },
                {
                    "Name": "number",
                    "Type": "int"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "ShouldGetNthLine(file interface{}, number int) string",
            "Source": "ewoJaWYgbGluZSwgZXJyIDo9IEdldE50aExpbmUoZmlsZSwgbnVtYmVyKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIGxpbmUKCX0gZWxzZSB7CgkJcmV0dXJuIGBgCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ShouldReadAllLines",
            "Comment": "Attempts to call ReadAllLines, but will return an empty slice if there is an error.  Does not panic.",
            "Arguments": [
                {
                    "Name": "file",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "[]string"
                }
            ],
            "Signature": "ShouldReadAllLines(file interface{}) []string",
            "Source": "ewoJaWYgbGluZXMsIGVyciA6PSBSZWFkQWxsTGluZXMoZmlsZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBsaW5lcwoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "SizeOf",
            "Comment": "Returns the size of the given filename, or zero if any error is encountered (or if the file is zero length).",
            "Arguments": [
                {
                    "Name": "path",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "convutil.Bytes"
                }
            ],
            "Signature": "SizeOf(path string) convutil.Bytes",
            "Source": "ewoJcGF0aCA9IE11c3RFeHBhbmRVc2VyKHBhdGgpCglpZiBzdGF0LCBlcnIgOj0gb3MuU3RhdChwYXRoKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIGNvbnZ1dGlsLkJ5dGVzKHN0YXQuU2l6ZSgpKQoJfQoJcmV0dXJuIDAKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "WriteFile",
            "Comment": "Write the contents of the given io.Reader, []byte, or string to the specified filename.\nFilename paths containing tilde (~) will automatically expand to the current\nuser's home directory, and all intermediate parent directories will be automatically\ncreated.  Will return the number of bytes written, or an error.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "interface{}"
                },
                {
                    "Name": "filename",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "int64"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "WriteFile(input interface{}, filename string) (int64, error)",
            "Source": "ewoJdmFyIHJlYWRlciBpby5SZWFkZXIKCWlmIHIsIG9rIDo9IGlucHV0Lihpby5SZWFkZXIpOyBvayB7CgkJcmVhZGVyID0gcgoJfSBlbHNlIGlmIGIsIG9rIDo9IGlucHV0LihbXWJ5dGUpOyBvayB7CgkJcmVhZGVyID0gYnl0ZXMuTmV3QnVmZmVyKGIpCgl9IGVsc2UgaWYgcywgb2sgOj0gaW5wdXQuKHN0cmluZyk7IG9rIHsKCQlyZWFkZXIgPSBieXRlcy5OZXdCdWZmZXJTdHJpbmcocykKCX0gZWxzZSB7CgkJcmV0dXJuIDAsIGZtdC5FcnJvcmYoIkNhbm5vdCB1c2UgJVQgYXMgaW5wdXQiLCBpbnB1dCkKCX0KCWlmIGV4cGFuZGVkLCBlcnIgOj0gRXhwYW5kVXNlcihmaWxlbmFtZSk7IGVyciA9PSBuaWwgewoJCXBhcmVudCA6PSBmaWxlcGF0aC5EaXIoZXhwYW5kZWQpCgkJaWYgIURpckV4aXN0cyhwYXJlbnQpIHsKCQkJaWYgZXJyIDo9IG9zLk1rZGlyQWxsKHBhcmVudCwgMDcwMCk7IGVyciAhPSBuaWwgewoJCQkJcmV0dXJuIDAsIGVycgoJCQl9CgkJfQoJCWlmIGRlc3QsIGVyciA6PSBvcy5DcmVhdGUoZXhwYW5kZWQpOyBlcnIgPT0gbmlsIHsKCQkJZGVmZXIgZGVzdC5DbG9zZSgpCgkJCXJldHVybiBpby5Db3B5KGRlc3QsIHJlYWRlcikKCQl9IGVsc2UgewoJCQlyZXR1cm4gMCwgZXJyCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gMCwgZXJyCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "WriteTempFile",
            "Comment": "Same as WriteFile, but writes the given input to a temporary file, returning\nthe filename.",
            "Arguments": [
                {
                    "Name": "input",
                    "Type": "interface{}"
                },
                {
                    "Name": "pattern",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "WriteTempFile(input interface{}, pattern string) (string, error)",
            "Source": "ewoJaWYgdG1wLCBlcnIgOj0gaW91dGlsLlRlbXBGaWxlKGBgLCBwYXR0ZXJuKTsgZXJyID09IG5pbCB7CgkJZGVmZXIgdG1wLkNsb3NlKCkKCQlpZiBfLCBlcnIgOj0gV3JpdGVGaWxlKGlucHV0LCB0bXAuTmFtZSgpKTsgZXJyID09IG5pbCB7CgkJCXJldHVybiB0bXAuTmFtZSgpLCBuaWwKCQl9IGVsc2UgewoJCQlkZWZlciBvcy5SZW1vdmUodG1wLk5hbWUoKSkKCQkJcmV0dXJuIGBgLCBlcnIKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBgYCwgZXJyCgl9Cn0=",
            "IsPackageLevel": true
        }
    ],
    "Tests": [
        {
            "Name": "TestCopyDir",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCopyDir(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglidWYgOj0gYnl0ZXMuTmV3QnVmZmVyKG5pbCkKCWNvb2wgOj0gJmFwcGVuZENvb2xXcml0ZXJ7d3JpdGVyOiBidWZ9Cglhc3NlcnQuTm9FcnJvcihDb3B5RGlyKGAuL3Rlc3RkaXJgLCBmdW5jKHBhdGggc3RyaW5nLCBpbmZvIG9zLkZpbGVJbmZvLCBlcnIgZXJyb3IpIChpby5Xcml0ZXIsIGVycm9yKSB7CgkJaWYgaW5mby5Jc0RpcigpIHsKCQkJcmV0dXJuIG5pbCwgbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGNvb2wsIGVycgoJCX0KCX0pKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKCJhXG5jb29sLlxuYlxuY29vbC5cbmNcbmNvb2wuXG5kMVxuY29vbC5cbmQyXG5jb29sLlxuZDNcbmNvb2wuXG5lMTFcbmNvb2wuXG5lMlxuY29vbC5cbiIsIGJ1Zi5TdHJpbmcoKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDirReader",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDirReader(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglkcmVhZCA6PSBOZXdEaXJSZWFkZXIoYC4vdGVzdGRpcmApCglkZWZlciBkcmVhZC5DbG9zZSgpCglkYXRhLCBlcnIgOj0gaW91dGlsLlJlYWRBbGwoZHJlYWQpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoImFcbmJcbmNcbmQxXG5kMlxuZDNcbmUxMVxuZTJcbiIsIHN0cmluZyhkYXRhKSkKCWFzc2VydC5Ob0Vycm9yKGRyZWFkLkNsb3NlKCkpCglkYXRhLCBlcnIgPSBpb3V0aWwuUmVhZEFsbChkcmVhZCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCgiYVxuYlxuY1xuZDFcbmQyXG5kM1xuZTExXG5lMlxuIiwgc3RyaW5nKGRhdGEpKQoJZHJlYWQgPSBOZXdEaXJSZWFkZXIoYC4vdGVzdGRpci9kYCkKCWRhdGEsIGVyciA9IGlvdXRpbC5SZWFkQWxsKGRyZWFkKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKCJkMVxuZDJcbmQzXG4iLCBzdHJpbmcoZGF0YSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestDirReaderSkipFunc",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestDirReaderSkipFunc(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglkcmVhZCA6PSBOZXdEaXJSZWFkZXIoYC4vdGVzdGRpcmApCglkZWZlciBkcmVhZC5DbG9zZSgpCglkcmVhZC5TZXRTa2lwRnVuYyhmdW5jKHAgc3RyaW5nKSBib29sIHsKCQlmaWxlbmFtZSA6PSBzdHJpbmdzLlRyaW1TdWZmaXgocCwgZmlsZXBhdGguRXh0KHApKQoJCXQuTG9nZigiJXM6ICV2IiwgZmlsZW5hbWUsIHN0cmluZ3MuSGFzU3VmZml4KGZpbGVuYW1lLCBgMWApKQoJCXJldHVybiBzdHJpbmdzLkhhc1N1ZmZpeChmaWxlbmFtZSwgYDFgKQoJfSkKCWRhdGEsIGVyciA6PSBpb3V0aWwuUmVhZEFsbChkcmVhZCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCgiYVxuYlxuY1xuZDJcbmQzXG5lMlxuIiwgc3RyaW5nKGRhdGEpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestGetMimeType",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestGetMimeType(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYHRleHQvcGxhaW47IGNoYXJzZXQ9dXRmLThgLCBHZXRNaW1lVHlwZShgdGVzdC50eHRgKSkKCWFzc2VydC5FcXVhbChgaW1hZ2UvanBlZ2AsIEdldE1pbWVUeXBlKGB0ZXN0LmpwZ2ApKQoJYXNzZXJ0LkVxdWFsKGBpbWFnZS9naWZgLCBHZXRNaW1lVHlwZShgdGVzdC5naWZgKSkKCWFzc2VydC5FcXVhbChgaW1hZ2UvcG5nYCwgR2V0TWltZVR5cGUoYHRlc3QucG5nYCkpCglhc3NlcnQuRXF1YWwoYGltYWdlL3N2Zyt4bWxgLCBHZXRNaW1lVHlwZShgdGVzdC5zdmdgKSkKCWFzc2VydC5FcXVhbChgYXBwbGljYXRpb24vanNvbmAsIEdldE1pbWVUeXBlKGB0ZXN0Lmpzb25gKSkKCWFzc2VydC5FcXVhbChgdGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04YCwgR2V0TWltZVR5cGUoYHRlc3QuaHRtbGApKQoJYXNzZXJ0LkVxdWFsKGB0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThgLCBHZXRNaW1lVHlwZShgdGVzdC5odG1gKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestReadManipulatorDoNothingFunction",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestReadManipulatorDoNothingFunction(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglybSA6PSBOZXdSZWFkTWFuaXB1bGF0b3IodHQoKSwgZnVuYyhpbiBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJcmV0dXJuIGluLCBuaWwKCX0pCglvdXQsIGVyciA6PSBpb3V0aWwuUmVhZEFsbChybSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCh0ZXN0VGV4dCwgc3RyaW5nKG91dCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestReadManipulatorDolorToBacon",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestReadManipulatorDolorToBacon(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglybSA6PSBOZXdSZWFkTWFuaXB1bGF0b3IodHQoKSwgZnVuYyhpbiBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7CgkJbGluZSA6PSBzdHJpbmdzLlJlcGxhY2Uoc3RyaW5nKGluKSwgYGRvbG9yYCwgYGJhY29uYCwgLTEpCgkJcmV0dXJuIFtdYnl0ZShsaW5lKSwgbmlsCgl9KQoJb3V0LCBlcnIgOj0gaW91dGlsLlJlYWRBbGwocm0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoc3RyaW5ncy5SZXBsYWNlKHRlc3RUZXh0LCBgZG9sb3JgLCBgYmFjb25gLCAtMSksIHN0cmluZyhvdXQpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestReadManipulatorManipulateAll",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestReadManipulatorManipulateAll(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmbjEgOj0gUmVwbGFjZVdpdGgoYGRvbG9yYCwgYGJhY29uYCwgLTEpCglmbjIgOj0gUmVtb3ZlQmxhbmtMaW5lcwoJZm4zIDo9IGZ1bmMoaW4gW11ieXRlKSAoW11ieXRlLCBlcnJvcikgewoJCWxpbmUgOj0gc3RyaW5ncy5SZXBsYWNlKHN0cmluZyhpbiksIGBub3N0cnVkYCwgYHBvdGF0b2AsIC0xKQoJCXJldHVybiBbXWJ5dGUobGluZSksIG5pbAoJfQoJcm0gOj0gTmV3UmVhZE1hbmlwdWxhdG9yKHR0KCksIE1hbmlwdWxhdGVBbGwoZm4xLCBmbjIsIGZuMykpCgl3YW50ZWQgOj0gdGVzdFRleHQKCXdhbnRlZCA9IHN0cmluZ3MuUmVwbGFjZSh3YW50ZWQsIGBkb2xvcmAsIGBiYWNvbmAsIC0xKQoJd2FudGVkID0gc3RyaW5ncy5SZXBsYWNlKHdhbnRlZCwgYG5vc3RydWRgLCBgcG90YXRvYCwgLTEpCgl3YW50ZWQgPSBzdHJpbmdzLlJlcGxhY2Uod2FudGVkLCAiXG5cbiIsICJcbiIsIC0xKQoJb3V0LCBlcnIgOj0gaW91dGlsLlJlYWRBbGwocm0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwod2FudGVkLCBzdHJpbmcob3V0KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestReadManipulatorNoOp",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestReadManipulatorNoOp(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglybSA6PSBOZXdSZWFkTWFuaXB1bGF0b3IodHQoKSkKCW91dCwgZXJyIDo9IGlvdXRpbC5SZWFkQWxsKHJtKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKHRlc3RUZXh0LCBzdHJpbmcob3V0KSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestReadManipulatorRemoveBlankLines",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestReadManipulatorRemoveBlankLines(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglybSA6PSBOZXdSZWFkTWFuaXB1bGF0b3IodHQoKSwgUmVtb3ZlQmxhbmtMaW5lcykKCW91dCwgZXJyIDo9IGlvdXRpbC5SZWFkQWxsKHJtKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKHN0cmluZ3MuVHJpbVNwYWNlKHRlc3RUZXh0UHJlKSt0ZXN0VGV4dEJvZHksIHN0cmluZyhvdXQpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestReadManipulatorRemoveComments",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestReadManipulatorRemoveComments(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglybSA6PSBOZXdSZWFkTWFuaXB1bGF0b3IodHQoKSwgUmVtb3ZlTGluZXNXaXRoUHJlZml4KGAvL2AsIHRydWUpKQoJb3V0LCBlcnIgOj0gaW91dGlsLlJlYWRBbGwocm0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoIlxuIit0ZXN0VGV4dEJvZHksIHN0cmluZyhvdXQpKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRewriteFileSystem",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRewriteFileSystem(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglyd2ZzIDo9IFJld3JpdGVGaWxlU3lzdGVte0ZpbGVTeXN0ZW06IFRlc3RGaWxlU3lzdGVte2AvdGVzdGA6IG5pbH19CglfLCBlcnIgOj0gcndmcy5PcGVuKGAvdGVzdGApCglhc3NlcnQuTmlsKGVycikKCXJ3ZnMgPSBSZXdyaXRlRmlsZVN5c3RlbXtGaWxlU3lzdGVtOiBUZXN0RmlsZVN5c3RlbXtgL3Rlc3RgOiBuaWx9LCBGaW5kOiByZWdleHAuTXVzdENvbXBpbGUoYF4vc3RyaXBgKX0KCV8sIGVyciA9IHJ3ZnMuT3BlbihgL3Rlc3RgKQoJYXNzZXJ0Lk5pbChlcnIpCglfLCBlcnIgPSByd2ZzLk9wZW4oYC9zdHJpcC90ZXN0YCkKCWFzc2VydC5OaWwoZXJyKQoJcndmcyA9IFJld3JpdGVGaWxlU3lzdGVte0ZpbGVTeXN0ZW06IFRlc3RGaWxlU3lzdGVte2AvdGVzdGA6IG5pbH0sIEZpbmQ6IHJlZ2V4cC5NdXN0Q29tcGlsZShgXi9zdHJpcGApLCBNdXN0TWF0Y2g6IHRydWV9CglfLCBlcnIgPSByd2ZzLk9wZW4oYC90ZXN0YCkKCWFzc2VydC5FcXVhbChvcy5FcnJOb3RFeGlzdCwgZXJyKQoJXywgZXJyID0gcndmcy5PcGVuKGAvc3RyaXAvdGVzdGApCglhc3NlcnQuTmlsKGVycikKCXJ3ZnMgPSBSZXdyaXRlRmlsZVN5c3RlbXtGaWxlU3lzdGVtOiBUZXN0RmlsZVN5c3RlbXtgL290aGVyL3Rlc3RgOiBuaWx9LCBGaW5kOiByZWdleHAuTXVzdENvbXBpbGUoYF4vc3RyaXBgKSwgUmVwbGFjZTogYC9vdGhlcmAsIE11c3RNYXRjaDogdHJ1ZX0KCV8sIGVyciA9IHJ3ZnMuT3BlbihgL3N0cmlwL3Rlc3RgKQoJYXNzZXJ0Lk5pbChlcnIpCglfLCBlcnIgPSByd2ZzLk9wZW4oYC9vdGhlci90ZXN0YCkKCWFzc2VydC5FcXVhbChvcy5FcnJOb3RFeGlzdCwgZXJyKQoJcndmcyA9IFJld3JpdGVGaWxlU3lzdGVte0ZpbGVTeXN0ZW06IFRlc3RGaWxlU3lzdGVte2AvYmVmb3JlL2FmdGVyL3Rlc3RgOiBuaWx9LCBGaW5kOiByZWdleHAuTXVzdENvbXBpbGUoYF4vKD9QPGZpcnN0PlteL10rKS8oP1A8c2Vjb25kPlteL10rKWApLCBSZXBsYWNlOiBgLyR7c2Vjb25kfS8ke2ZpcnN0fWB9CglfLCBlcnIgPSByd2ZzLk9wZW4oYC9hZnRlci9iZWZvcmUvdGVzdGApCglhc3NlcnQuTmlsKGVycikKCV8sIGVyciA9IHJ3ZnMuT3BlbihgL2JlZm9yZS9hZnRlci90ZXN0YCkKCWFzc2VydC5FcXVhbChvcy5FcnJOb3RFeGlzdCwgZXJyKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestSameFile",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestSameFile(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShgZmlsZV90ZXN0LmdvYCwgYGZpbGVfdGVzdC5nb2ApKQoJYXNzZXJ0LlRydWUoU2FtZUZpbGUoYGZpbGUuZ29gLCBgZmlsZS5nb2ApKQoJaSwgZXJyIDo9IG9zLlN0YXQoYGZpbGVfdGVzdC5nb2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglvLCBlcnIgOj0gb3MuU3RhdChgZmlsZS5nb2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShpLCBpKSkKCWFzc2VydC5UcnVlKFNhbWVGaWxlKG8sIG8pKQoJYXNzZXJ0LkZhbHNlKFNhbWVGaWxlKGksIG8pKQoJYXNzZXJ0LkZhbHNlKFNhbWVGaWxlKG8sIGkpKQoJYXNzZXJ0LkZhbHNlKFNhbWVGaWxlKGksIG5pbCkpCglhc3NlcnQuRmFsc2UoU2FtZUZpbGUobmlsLCBpKSkKCWFzc2VydC5GYWxzZShTYW1lRmlsZShvLCBuaWwpKQoJYXNzZXJ0LkZhbHNlKFNhbWVGaWxlKG5pbCwgbykpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShpLCBgZmlsZV90ZXN0LmdvYCkpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShgZmlsZV90ZXN0LmdvYCwgaSkpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShvLCBgZmlsZS5nb2ApKQoJYXNzZXJ0LlRydWUoU2FtZUZpbGUoYGZpbGUuZ29gLCBvKSkKCWYxLCBlcnIgOj0gb3MuT3BlbihgZmlsZV90ZXN0LmdvYCkKCWRlZmVyIGYxLkNsb3NlKCkKCWYyLCBlcnIgOj0gb3MuT3BlbihgZmlsZS5nb2ApCglkZWZlciBmMi5DbG9zZSgpCglhc3NlcnQuVHJ1ZShTYW1lRmlsZShmMSwgZjEpKQoJYXNzZXJ0Lk5vRXJyb3IocmVzZXQoZjEpKQoJYXNzZXJ0LlRydWUoU2FtZUZpbGUoZjEsIGYxKSkKCWFzc2VydC5Ob0Vycm9yKHJlc2V0KGYxKSkKCWFzc2VydC5UcnVlKFNhbWVGaWxlKGksIGYxKSkKCWFzc2VydC5Ob0Vycm9yKHJlc2V0KGYxKSkKCWFzc2VydC5GYWxzZShTYW1lRmlsZShmMSwgZjIpKQoJYXNzZXJ0Lk5vRXJyb3IocmVzZXQoZjEpKQoJYXNzZXJ0Lk5vRXJyb3IocmVzZXQoZjIpKQoJYXNzZXJ0LkZhbHNlKFNhbWVGaWxlKGYyLCBmMSkpCglhc3NlcnQuTm9FcnJvcihyZXNldChmMSkpCglhc3NlcnQuTm9FcnJvcihyZXNldChmMikpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestSetExt",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestSetExt(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuRXF1YWwoYGAsIFNldEV4dChgYCwgYGApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci50eHRgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIGBgKSkKCWFzc2VydC5FcXVhbChgL25vdGhpbmdidXJnZXIuanBnYCwgU2V0RXh0KGAvbm90aGluZ2J1cmdlci50eHRgLCBgLmpwZ2ApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci5qcGdgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIGBqcGdgKSkKCWFzc2VydC5FcXVhbChgL25vdGhpbmdidXJnZXIudHh0YCwgU2V0RXh0KGAvbm90aGluZ2J1cmdlci50eHRgLCBgLmpwZ2AsIGAuYm1wYCkpCglhc3NlcnQuRXF1YWwoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIFNldEV4dChgL25vdGhpbmdidXJnZXIudHh0YCwgYGpwZ2AsIGAuYm1wYCkpCglhc3NlcnQuRXF1YWwoYC9ub3RoaW5nYnVyZ2VyLmpwZ2AsIFNldEV4dChgL25vdGhpbmdidXJnZXIudHh0YCwgYC5qcGdgLCBgLnR4dGApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci5qcGdgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIGBqcGdgLCBgLnR4dGApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci5qcGdgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIGAuanBnYCwgYHR4dGApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci5qcGdgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLnR4dGAsIGBqcGdgLCBgdHh0YCkpCglhc3NlcnQuRXF1YWwoYC9ub3RoaW5nYnVyZ2VyLmluZm8ueG1sYCwgU2V0RXh0KGAvbm90aGluZ2J1cmdlci5pbmZvLmpzb25gLCBgeG1sYCkpCglhc3NlcnQuRXF1YWwoYC9ub3RoaW5nYnVyZ2VyLmluZm8ueG1sYCwgU2V0RXh0KGAvbm90aGluZ2J1cmdlci5pbmZvLmpzb25gLCBgLnhtbGApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci54bWxgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLmluZm8uanNvbmAsIGAueG1sYCwgYGluZm8uanNvbmApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci54bWxgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLmluZm8uanNvbmAsIGAueG1sYCwgYC5pbmZvLmpzb25gKSkKCWFzc2VydC5FcXVhbChgL25vdGhpbmdidXJnZXIueG1sYCwgU2V0RXh0KGAvbm90aGluZ2J1cmdlci5pbmZvLmpzb25gLCBgeG1sYCwgYGluZm8uanNvbmApKQoJYXNzZXJ0LkVxdWFsKGAvbm90aGluZ2J1cmdlci54bWxgLCBTZXRFeHQoYC9ub3RoaW5nYnVyZ2VyLmluZm8uanNvbmAsIGB4bWxgLCBgLmluZm8uanNvbmApKQp9",
            "IsPackageLevel": true
        }
    ],
    "Types": {
        "CopyEntryFunc": {
            "Name": "CopyEntryFunc",
            "Source": "dHlwZSBDb3B5RW50cnlGdW5jIGZ1bmMocGF0aCBzdHJpbmcsIGluZm8gb3MuRmlsZUluZm8sIGVyciBlcnJvcikgKGlvLldyaXRlciwgZXJyb3Ip"
        },
        "DirReader": {
            "Name": "DirReader",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Close",
                    "Comment": "close open files and reset the internal reader",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Close() error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "NewDirReader",
                    "Arguments": [
                        {
                            "Name": "path",
                            "Type": "string"
                        },
                        {
                            "Name": "options",
                            "Type": "...DirReaderOption"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*DirReader"
                        }
                    ],
                    "Signature": "NewDirReader(path string, options ...DirReaderOption) *DirReader",
                    "Source": "ewoJcmV0dXJuICZEaXJSZWFkZXJ7cm9vdDogcGF0aCwgb3B0aW9uczogRGlyUmVhZGVyT3B0aW9ucyhvcHRpb25zKX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Read",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "b",
                            "Type": "[]byte"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "int"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Read(b []byte) (int, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetSkipFunc",
                    "Comment": "Set a function that will be called for each path encountered while reading.\nIf this function returns true, that path (and its descedants) will not be read.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fn",
                            "Type": "SkipFunc"
                        }
                    ],
                    "Signature": "SetSkipFunc(fn SkipFunc)",
                    "IsPackageLevel": false
                }
            ],
            "Comment": "A DirReader provides a streaming io.Reader interface to all files in a given\ndirectory, with options for handling unreadable entries and recursion.",
            "Source": "dHlwZSBEaXJSZWFkZXIgc3RydWN0IHsKCn0vLyBBIERpclJlYWRlciBwcm92aWRlcyBhIHN0cmVhbWluZyBpby5SZWFkZXIgaW50ZXJmYWNlIHRvIGFsbCBmaWxlcyBpbiBhIGdpdmVuCi8vIGRpcmVjdG9yeSwgd2l0aCBvcHRpb25zIGZvciBoYW5kbGluZyB1bnJlYWRhYmxlIGVudHJpZXMgYW5kIHJlY3Vyc2lvbi4KCg==",
            "HasUnexportedFields": true
        },
        "DirReaderOption": {
            "Name": "DirReaderOption",
            "MetaType": "int",
            "Source": "dHlwZSBEaXJSZWFkZXJPcHRpb24gaW50"
        },
        "DirReaderOptions": {
            "Name": "DirReaderOptions",
            "Methods": [
                {
                    "Name": "Has",
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "option",
                            "Type": "DirReaderOption"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "Has(option DirReaderOption) bool",
                    "IsPackageLevel": false
                }
            ],
            "Source": "dHlwZSBEaXJSZWFkZXJPcHRpb25zIFtdRGlyUmVhZGVyT3B0aW9u"
        },
        "FileInfo": {
            "Name": "FileInfo",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "IsDir",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsDir() bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ModTime",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "time.Time"
                        }
                    ],
                    "Signature": "ModTime() time.Time",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Mode",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "os.FileMode"
                        }
                    ],
                    "Signature": "Mode() os.FileMode",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Name",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "Name() string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "NewFileInfo",
                    "Arguments": [
                        {
                            "Name": "wrap",
                            "Type": "...os.FileInfo"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*FileInfo"
                        }
                    ],
                    "Signature": "NewFileInfo(wrap ...os.FileInfo) *FileInfo",
                    "Source": "ewoJaWYgbGVuKHdyYXApID4gMCAmJiB3cmFwWzBdICE9IG5pbCB7CgkJcmV0dXJuICZGaWxlSW5mb3tGaWxlSW5mbzogd3JhcFswXX0KCX0gZWxzZSB7CgkJcmV0dXJuIG5ldyhGaWxlSW5mbykKCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "SetIsDir",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "isDir",
                            "Type": "bool"
                        }
                    ],
                    "Signature": "SetIsDir(isDir bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetModTime",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "mtime",
                            "Type": "time.Time"
                        }
                    ],
                    "Signature": "SetModTime(mtime time.Time)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetMode",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "mode",
                            "Type": "os.FileMode"
                        }
                    ],
                    "Signature": "SetMode(mode os.FileMode)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetName",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Signature": "SetName(name string)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetSize",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "sz",
                            "Type": "int64"
                        }
                    ],
                    "Signature": "SetSize(sz int64)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetSys",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "iface",
                            "Type": "interface{}"
                        }
                    ],
                    "Signature": "SetSys(iface interface{})",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Size",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "int64"
                        }
                    ],
                    "Signature": "Size() int64",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Sys",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "interface{}"
                        }
                    ],
                    "Signature": "Sys() interface{}",
                    "IsPackageLevel": false
                }
            ],
            "Comment": "An os.FileInfo-compatible wrapper that allows for individual values to be overridden.",
            "Source": "dHlwZSBGaWxlSW5mbyBzdHJ1Y3QgewoJb3MuRmlsZUluZm8KCn0vLyBBbiBvcy5GaWxlSW5mby1jb21wYXRpYmxlIHdyYXBwZXIgdGhhdCBhbGxvd3MgZm9yIGluZGl2aWR1YWwgdmFsdWVzIHRvIGJlIG92ZXJyaWRkZW4uCgo=",
            "HasUnexportedFields": true
        },
        "OpenHandler": {
            "Name": "OpenHandler",
            "Source": "dHlwZSBPcGVuSGFuZGxlciBmdW5jKCp1cmwuVVJMLCBPcGVuT3B0aW9ucykgKGlvLlJlYWRDbG9zZXIsIGVycm9yKQ=="
        },
        "OpenOptions": {
            "Name": "OpenOptions",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "GetTimeout",
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "time.Duration"
                        }
                    ],
                    "Signature": "GetTimeout() time.Duration",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "Timeout",
                    "Type": "time.Duration"
                },
                {
                    "Name": "Insecure",
                    "Type": "bool"
                }
            ],
            "Source": "dHlwZSBPcGVuT3B0aW9ucyBzdHJ1Y3QgewoJVGltZW91dCAgdGltZS5EdXJhdGlvbgoJSW5zZWN1cmUgYm9vbAp9"
        },
        "PostReadCloser": {
            "Name": "PostReadCloser",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Close",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Close() error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "NewPostReadCloser",
                    "Comment": "Implements an io.ReadCloser that can be configured to perform cleanup options whenever the\nClose() function is called.",
                    "Arguments": [
                        {
                            "Name": "upstream",
                            "Type": "io.ReadCloser"
                        },
                        {
                            "Name": "closer",
                            "Type": ""
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*PostReadCloser"
                        }
                    ],
                    "Signature": "NewPostReadCloser(upstream io.ReadCloser, closer ) *PostReadCloser",
                    "Source": "ewoJcmV0dXJuICZQb3N0UmVhZENsb3Nlcnt1cHN0cmVhbTogdXBzdHJlYW0sIGNsb3NlcjogY2xvc2VyfQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Read",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "b",
                            "Type": "[]byte"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "int"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Read(b []byte) (int, error)",
                    "IsPackageLevel": false
                }
            ],
            "Source": "dHlwZSBQb3N0UmVhZENsb3NlciBzdHJ1Y3QgewoKfQo=",
            "HasUnexportedFields": true
        },
        "ReadManipulator": {
            "Name": "ReadManipulator",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Close",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Close() error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "NewReadManipulator",
                    "Arguments": [
                        {
                            "Name": "reader",
                            "Type": "io.Reader"
                        },
                        {
                            "Name": "fns",
                            "Type": "...ReadManipulatorFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*ReadManipulator"
                        }
                    ],
                    "Signature": "NewReadManipulator(reader io.Reader, fns ...ReadManipulatorFunc) *ReadManipulator",
                    "Source": "ewoJcm0gOj0gJlJlYWRNYW5pcHVsYXRvcntyZWFkZXI6IHJlYWRlciwgc3BsaXR0ZXI6IGJ1ZmlvLlNjYW5MaW5lcywgYnVmZmVyOiBieXRlcy5OZXdCdWZmZXIobmlsKX0KCWlmIGxlbihmbnMpID4gMCAmJiBmbnNbMF0gIT0gbmlsIHsKCQlybS5mbiA9IGZuc1swXQoJfQoJcmV0dXJuIHJtCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Read",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "b",
                            "Type": "[]byte"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "int"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Read(b []byte) (int, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Split",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "split",
                            "Type": "bufio.SplitFunc"
                        }
                    ],
                    "Signature": "Split(split bufio.SplitFunc)",
                    "IsPackageLevel": false
                }
            ],
            "Source": "dHlwZSBSZWFkTWFuaXB1bGF0b3Igc3RydWN0IHsKCn0K",
            "HasUnexportedFields": true
        },
        "ReadManipulatorFunc": {
            "Name": "ReadManipulatorFunc",
            "Source": "dHlwZSBSZWFkTWFuaXB1bGF0b3JGdW5jIGZ1bmMoZGF0YSBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKQ=="
        },
        "RewriteFileSystem": {
            "Name": "RewriteFileSystem",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Open",
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "http.File"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Open(name string) (http.File, error)",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "FileSystem",
                    "Type": "http.FileSystem"
                },
                {
                    "Name": "Find",
                    "Type": "*regexp.Regexp"
                },
                {
                    "Name": "Replace",
                    "Type": "string"
                },
                {
                    "Name": "MustMatch",
                    "Type": "bool"
                }
            ],
            "Source": "dHlwZSBSZXdyaXRlRmlsZVN5c3RlbSBzdHJ1Y3QgewoJRmlsZVN5c3RlbSBodHRwLkZpbGVTeXN0ZW0KCUZpbmQgICAgICAgKnJlZ2V4cC5SZWdleHAKCVJlcGxhY2UgICAgc3RyaW5nCglNdXN0TWF0Y2ggIGJvb2wKfQ=="
        },
        "SkipFunc": {
            "Name": "SkipFunc",
            "Source": "dHlwZSBTa2lwRnVuYyBmdW5jKHN0cmluZykgYm9vbA=="
        },
        "TestFileSystem": {
            "Name": "TestFileSystem",
            "Methods": [
                {
                    "Name": "Open",
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "http.File"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Open(name string) (http.File, error)",
                    "IsPackageLevel": false
                }
            ],
            "Source": "dHlwZSBUZXN0RmlsZVN5c3RlbSBtYXBbc3RyaW5nXWh0dHAuRmlsZQ=="
        }
    }
}
